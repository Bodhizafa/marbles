<!DOCTYPE html>
<head>
<title></title>
<script src="https://code.jquery.com/jquery-2.1.3.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.1.0/gl-matrix.js"></script>
<script src="./util.js"></script>
<script src="./marbles.js"></script>
<script type="text/javascript"> 
"use strict";
// A Bucket of tests has a name and is a list of functions, 
// each of which is passed a pass() and fail() continuation.  
// Each function is represented by a sliver in the DOM

var run_tests = function(bucketName, tests) {
    var nTests = tests.length,
        $bucket = $('<div class="bucket"></div>');
    $bucket.append('<span class="passed bin"></span><span class="failed bin"></span><span class="undone bin"></span>');
    $('#everything').append($bucket);
    console.log('Running', bucketName, 'of', nTests);
    tests.forEach(function(test, idx) {
        var $sliver = $('<div class="sliver"></div>')
            .addClass('sliver')
            .css('background-color', random_color())
            .css('width', (100.0 / nTests) + '%');
        var pass = function() {
            if ($sliver) {
                $sliver.appendTo($bucket.find('.passed'));
                console.log(bucketName + '[' + idx + '] PASSED');
            }
        }
        var fail = function(msg) {
            $sliver.appendTo($bucket.find('.failed'));
            console.error(bucketName + '[' + idx + '] FAILED', msg);
            $sliver = null;
        }
        $sliver.appendTo($bucket.find('.undone'));
        test(pass, fail);
    });
}
</script> 
<script type="text/javascript"> 
"use strict";
$(document).ready(function(e) {
    // Fun tests
    run_tests('Testing Testing', function(n, msecs) {
        var tests = [];
        for(var i = 0; i < n; i++) {
            tests[i] = (function(i) {
                return (function(pass, fail) {
                    window.setTimeout(pass, 1000.0  * i / n * msecs)
                })
            })(i+1);
        }
        return tests;
    }(5, 5));

    run_tests('Primitive Marbles', [
        // Let's see what happens when we make Array marbles
        // XXX This is a test, not an example.
        function(pass, fail) {
            var m = PrimitiveMarble(),
                arr1 = [],
                arr2 = [],
                c = [], // Stack of listener arguments arrays
                l = function() { c.push(arguments); };
            m(arr1);
            m.addListener(l);
            if (m() !== arr1) fail();
            if (m() === arr2) fail();
            m(arr1);
            if (c.length !== 0) fail();
            m(arr2);
            if (c.length !== 1) fail();
            arr2.push(1);
            arr2.push(2);
            if (m()[0] !== 1) fail();
            m(arr2);
            if (c.length !== 1) fail();
            pass(); // I forgot what I was working on...
        },
        // Let's see what happens when we make object marbles
        // XXX This is a test, not an example.
        function(pass, fail) {
            var m = PrimitiveMarble(),
                obj = {'a': 4, 'b': 8},
                obj2 = {'b': 8, 'a': 4},
                c = [], // Stack of listener arguments arrays
                l = function() { c.push(arguments); };
            m(obj);
            if (m().a !== 4) fail();
            if (m() !== obj) fail();
            if (m() === obj2) fail();
            m(obj2);
            if (m() !== obj2) fail();
            if (m() === obj) fail();
            m.addListener(l);
            m(obj2);
            if (c.length !== 0) fail();
            obj2.c = 5;
            if (m().c !== 5) fail();
            m(obj2);
            if (c.length !== 0) fail();
            m(obj);
            if (c[0][0] != obj) fail();
            if (c[0][1] != obj2) fail();
            if (m() !== obj) fail();
            m(obj2);
            if (c[1][0] != obj2) fail();
            if (c[1][1] != obj) fail();
            if (m() !== obj2) fail();
            pass();
        }, 
        // Let's see if listeners work
        function(pass, fail) {
            var m = PrimitiveMarble(),
                s = "I'm just here so",
                c = [], // Stack of listener arguments arrays
                l = function(newVal, oldVal) { c.push({"n": newVal, "o": oldVal});};
            m('0xC');
            m.addListener(l);
            m('0xC');
            if (c.length !== 0) fail();
            m('1100');
            if (c.length !== 1) fail();
            if (c[0].n !== '1100' || c[0].o !== '0xC') fail();
            m('12');
            if (c.length !== 2) fail();
            if (c[1].n !== '12' || c[1].o !== '1100') fail();
            m(12);
            if (c.length !== 3) fail();
            m.subtractListener(l);
            m("I'm just here so I won't get fined");
            if (c.length !== 3) fail();
            m.addListener(l);
            m(s + " I won't get fined");
            if (c.length !== 3) fail();
            m("1100");
            pass();
        }, 
        // Let's make a primitive marble
        function(pass, fail) {
            var m = PrimitiveMarble(),
                f = Math.sqrt(2);
            if (m() !== undefined) fail();
            m('100,000');
            if (m() !== '100,000') fail();
            m(4);
            if (m() !== 4) fail();
            m(f);
            if (m() !== f) fail();
            pass();
        }
    ]);

    // Util tests
    run_tests('Class system', [
        // Let's test method thisness
        function(pass, fail) {
            var that,
                that2,
                that3,
                c, d, e,
                C = Class({}, {"wobble": function(priv) { that = this }}),
                D = C.SubClass({}, {"wibble": function(priv) { that2 = this }}),
                E = D.SubClass({}, {"wobble": function(priv) { that3 = this }});

            c = C();
            if (that !== undefined) fail();
            if (that2 !== undefined) fail();
            if (that3 !== undefined) fail();
            c.wobble();
            if (that !== c) fail();
            if (that2 !== undefined) fail();
            if (that3 !== undefined) fail();
            d = D();
            d.wobble();
            if (that !== d) fail();
            if (that2 !== undefined) fail();
            if (that3 !== undefined) fail();
            d.wibble();
            if (that !== d) fail();
            if (that2 !== d) fail();
            if (that3 !== undefined) fail();
            e = E();
            e.wobble();
            if (that !== d) fail();
            if (that2 !== d) fail();
            if (that3 !== e) fail();
            e.wibble();
            if (that !== d) fail();
            if (that2 !== e) fail();
            if (that3 !== e) fail();
            c.wobble();
            if (that !== c) fail();
            if (that2 !== e) fail();
            if (that3 !== e) fail();
            pass();
        },
        // Let's test constructor thisness
        function(pass, fail) {
            var that, 
                that2,
                c, d, 
                C = Class({}, {}, function(priv) { that = this }),
                D = C.SubClass({}, {}, function(priv) { that2 = this }),
                c = C();

            if (that !== c) fail();
            if (that2 !== undefined) fail();
            d = D();
            if (that !== d) fail();
            if (that2 !== d) fail();
            pass()
        },
        // Let's override a property
        function(pass, fail) {
            var that,
                C = Class(
                    // Properties
                    {"A": "A",
                     "B": "B"},
                    // Methods
                    {},
                    // Constructor
                    function(priv) { priv.that = this;}
                    // Descriptors
                ),
                D = C.SubClass({"A": "freeve"}),
                E = D.SubClass({"B": "breeve"}),
                d = D(),
                c = C(),
                e = E();
            if (c.A !== 'A') fail();
            if (c.B !== 'B') fail();
            if (d.A !== 'freeve') fail();
            if (d.B !== 'B') fail();
            d.A = 'AA';
            d.B = 'BB';
            if (d.A !== 'AA') fail();
            if (d.B !== 'BB') fail();
            if (e.A !== 'freeve') fail();
            if (e.B !== 'breeve') fail();
            pass();
        },
        // Let's extend a property
        function(pass, fail) {
            var C = Class(
                    // Properties
                    {"A": "A"},
                    // Methods
                    {}
                    // Constructor
                    // Descriptors
                ),
                D = C.SubClass({"B": "7"}),
                c = C(),
                d = D();
                if(c.B !== undefined) fail();
                if(c.A !== 'A') fail();
            pass();
        },
        // Let's make getters and setters
        function(pass, fail) {
            var that,
                c, 
                C = Class(
                    // Properties
                    {"A": null},
                    // Methods
                    {},
                    // Constructor
                    function() {},
                    // Descriptors
                    {"A": {"get": function() {that = this; return 42;}}}
                )
            c = C();
            if (c.A !== 42) fail();
            if (that !== c) fail();
            try {
                c = C({"A": 8});
                fail()
            } catch(e) {};
            try {
                var BROKEN = Class(
                    // Properties
                    {"A": 4},
                    // Methods
                    {},
                    // Constructor
                    function() {},
                    // Descriptors
                    {"A": {"get": function() {}, "set": function() {}}}
                )
                var b = BROKEN();
                fail(); // We should throw cause A is both default 4 and magic
            } catch (e) {};
            pass();
        },
        // Let's get trickier with functors
        function(pass, fail) {
            var ProtoMarble = Class(
                // Properties
                {
                    'type': 'basic',
                },
                // Methods
                { '': function(priv, arg) {
                    if (arg === undefined) {
                        // get
                        return priv.value;
                    } else {
                        // set
                        var newVal = priv.constraint.call(this, arg);
                        var oldVal = priv.value;
                        if (newVal != oldVal) {
                            priv.value = newVal;
                            var that = this;
                            priv.listeners.forEach(function(listener) {
                                listener.call(that, newVal, oldVal);
                            });
                            return newVal;
                        } else {
                            return priv.value;
                        }
                    }
                }, 'addListener': function(priv, listener) {
                    priv.listeners.push(listener);
                    
                }, 'subtractListener': function(priv, listener) {
                    var idx = priv.listeners.indexOf(listener);
                    if (idx == -1) throw ['Unknown listener',  listener];
                    delete priv.listeners[idx];
                } },
                // Constructor
                function(priv) {
                    priv.listeners = [];
                    priv.value = 0;
                    priv.constraint = function(val) {
                        if (val > 5) return 5;
                        else return val;
                    };
                },
                // Descriptors
                {'type': {'writable': false}}
            );
            var pm = ProtoMarble();
            // Make sure accessors work
            if (pm() != 0) fail();
            if (pm(4) != 4) fail();
            if (pm() != 4) fail();
            if (pm(9) != 5) fail(); 
            if (pm() != 5) fail();
            // Make sure listeners work
            var lCalls = [];
            var l = function(newVal, oldVal) {
                lCalls.push(newVal);
            }
            var l2Calls = [];
            var l2 = function(newVal, oldVal) {
                l2Calls.push(newVal);
            }
            pm.addListener(l);
            if (pm(0) != 0) fail(); // 1, 0 lcalls, l2calls
            pm.addListener(l2);
            if (pm(9) != 5) fail(); // 2, 1
            if (pm(4) != 4) fail(); // 3, 2
            if (lCalls[0] != 0) fail();
            if (lCalls[1] != 5) fail();
            if (lCalls[2] != 4) fail();
            if (lCalls.length != 3) fail();
            if (l2Calls[0] != 5) fail();
            if (l2Calls[1] != 4) fail();
            if (l2Calls.length != 2) fail();
            try {
                pm.subtractListener('ferve');
                fail();
            } catch(e) {};
            pm.subtractListener(l);
            if (pm(1) != 1) fail(); // 3, 3
            if (pm(2) != 2) fail(); // 3, 4
            if (lCalls[0] != 0) fail();
            if (lCalls[1] != 5) fail();
            if (lCalls[2] != 4) fail();
            if (lCalls.length != 3) fail;
            if (l2Calls[0] != 5) fail();
            if (l2Calls[1] != 4) fail();
            if (l2Calls[2] != 1) fail();
            if (l2Calls[3] != 2) fail();
            if (l2Calls.length != 4) fail();
            pass();
        }, 
        // Let's make a functor!
        function(pass, fail) {
            var getterThis;
            var Thingy = Class(
                // Properties
                {'A': 0, 'B': null}, 
                // Methods
                {  '': function(priv, arg) {
                    priv.calls.push(arg)
                    if(arg !== undefined) {
                        return arg + 5
                    } else {
                        return this.A + this.B;
                    }
                }, 'calls': function(priv) {
                    return priv.calls;
                }}, 
                // Constructor
                (function(priv) {
                    priv.calls = [];
                }),
                // Descriptors
                {'B': {'enumerable': true, 
                       'get': function() {getterThis = this; return 5;}}}
            );
            var t = Thingy();
            if (t.B != 5) fail();
            if (getterThis !== t) fail();
            if (t.calls() != 0) fail();
            if (t() != 5) fail();
            if (t(5) != 10) fail();
            var calls = t.calls();
            if (calls[0] != undefined) fail();
            if (calls[1] != 5) fail();
            try {
                t.B = 10;
                fail();
            } catch(e) {};
            // Ensure we have no two enumerable properties (A and B)
            var props = [];
            Object.keys(t).forEach(function(k) {
                props.push(k);
            });
            if (props.length != 2) fail();
            // In this case, our prototype should have 3, (A, B, calls)
            props = [];
            for (var k in t) {
                props.push(k);
            }
            if (props.length != 3) fail();
            pass();
        // Try a test with two properties, a methods, and no other magic
        }, function(pass, fail) {
            var CartPoint = Class(
                // Properties
                {'X': 0, 'Y': 0}, 
                // Methods
                {  'magnitude': function(priv) {
                    return Math.sqrt(this.X * this.X + this.Y * this.Y);
                }}
                // No Constructor
            );
            var cp = CartPoint();
            if (cp.X != 0) fail();
            if (cp.Y != 0) fail();
            cp = CartPoint({'Y': 10});
            if (cp.X != 0) fail();
            if (cp.Y != 10) fail();
            cp = CartPoint({'X': 10, 'Y': 10});
            if (cp.X != 10) fail();
            if (cp.Y != 10) fail();
            // Ensure we have no two enumerable properties (X and Y)
            var props = [];
            Object.keys(cp).forEach(function(k) {
                props.push(k);
            });
            if (props.length != 2) fail();
            // In this case, our prototype should have 3, (X, Y, magnitude)
            props = [];
            for (var k in cp) {
                props.push(k);
            }
            if (props.length != 3) fail();
            if (!close_enough(cp.magnitude(), 14.1421, 0.0001)) fail();
            pass();
        // Test as much as we can with the most boring object possible.
        }, function(pass, fail) {
            var constructorThis = null;
            var Boilerplate = Class(
                // Properties
                {},
                // Methods
                {},
                // Constructor
                function(priv) {
                    constructorThis = this;
                }
                // Descriptors
            )
            // Make sure that 'this' is correct in constructors 
            var b = Boilerplate();
            if (b !== constructorThis) fail();
            // Make sure we can't add properties willy-nilly
            try {
                b.berf = 'berf';
                fail(); // We should throw in the line above.
            } catch (e) {
            }
            // Ensure we have no own enumerable properties
            var props = [];
            Object.keys(b).forEach(function(k) {
                props.push(k);
            });
            if (props.length > 0) fail();
            // In this case, our prototype shouldn't have any enumerable properties either
            props = [];
            for (var k in b) {
                props.push(k);
            }
            if (props.length > 0) fail();
            pass();
        }
    ]);

});
</script>
</head>
<style type="text/css">
body {
    background-color: #002;
    color: #0ff;
    margin: 0;
    text-align: center;
    font-family: sans-serif;
}
.bucket {
    border: 1px solid #FFF;
    background-color: #000;
}
.bucket .sliver {
    border-bottom-width: 12px;
    border-bottom-style: solid;
    margin: 0;
    padding: 0;
}
.passed .sliver {
    border-bottom-color: #0F0 !important;
}
.failed .sliver {
    border-bottom-color: #F00
}
.undone .sliver {
    border-bottom-color: #00F;
}
.sliver {
    background-color: #eee;
    display: inline-block;
    margin: 0;
    padding: 0;
    width: 0;
    height: 32pt;
}
#everything {
}
h4 {
    color: #F0F;
}
</style>
<body>
<h4>.:THE WAY OF THE FUTURE:.</h4>
<div id="everything" class="container">
</div>
</body>
</html>
